openapi: "3.0.3"
info:
  title: "SampleAPI API"
  description: "SampleAPI API"
  version: "1.0.0"
servers:
  - url: "https://SampleAPI"
paths:
  /:
    get:
      description: ""
      responses:
        "200":
          description: "OK"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "DropTableUsers API 1.0"
  /1.0/admin/analytics/tour/{tourId}:
    get:
      description: ""
      parameters:
        - name: "tourId"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "tagId"
          in: "query"
          required: false
          schema:
            type: "integer"
        - name: "step"
          in: "query"
          required: false
          schema:
            type: "integer"
      responses:
        "403":
          description: "Forbidden"
          content:
            '*/*':
              schema:
                type: "object"
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/TourAnalyticResponse"
  /1.0/admin/analytics/user/{id}:
    get:
      description: ""
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "integer"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/UserAnalyticResponse"
  /1.0/admin/documents/{documentId}/delete:
    delete:
      description: ""
      parameters:
        - name: "documentId"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "{\"success\": true}"
  /1.0/admin/documents/create:
    post:
      description: ""
      requestBody:
        content:
          '*/*':
            schema:
              $ref: "#/components/schemas/DocumentCreateInput"
        required: true
      responses:
        "403":
          description: "Forbidden"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                Example#1:
                  description: ""
                  value:
                    status: "Forbidden"
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/DocumentOutputResponse"
  /1.0/admin/documents/list:
    get:
      description: ""
      responses:
        "403":
          description: "Forbidden"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                Example#1:
                  description: ""
                  value:
                    status: "Forbidden"
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/DocumentOutputResponse"
  /1.0/admin/documents/update:
    patch:
      description: ""
      requestBody:
        content:
          '*/*':
            schema:
              $ref: "#/components/schemas/DocumentUpdateInput"
        required: true
      responses:
        "403":
          description: "Forbidden"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                Example#1:
                  description: ""
                  value:
                    status: "Forbidden"
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "{\"success\": true}"
  /1.0/admin/groups/set:
    post:
      description: ""
      requestBody:
        content:
          '*/*':
            schema:
              $ref: "#/components/schemas/GroupSetRequestModel"
        required: true
      responses:
        "401":
          description: "Unauthorized"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "У вас недостаточно прав!"
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "object"
  /1.0/admin/tags:
    delete:
      description: ""
      requestBody:
        content:
          '*/*':
            schema:
              $ref: "#/components/schemas/DeleteTagsInputModel"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "object"
    get:
      description: ""
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/TagsOutput"
    post:
      description: ""
      requestBody:
        content:
          '*/*':
            schema:
              $ref: "#/components/schemas/CreateTagsInputModel"
        required: true
      responses:
        "201":
          description: "Created"
          content:
            '*/*':
              schema:
                type: "object"
  /1.0/admin/teams/template:
    get:
      description: ""
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/TeamTemplate"
        "204":
          description: "No Content"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                Example#1:
                  description: ""
                  value:
                    status: "Темплейт отсутствует"
    post:
      description: ""
      requestBody:
        content:
          '*/*':
            schema:
              $ref: "#/components/schemas/TeamTemplate"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "object"
  /1.0/admin/users:
    get:
      description: ""
      responses:
        "403":
          description: "Forbidden"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                Example#1:
                  description: ""
                  value:
                    status: "Forbidden"
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/AdminUserOutputResponse"
  /1.0/admin/users/notify:
    post:
      description: ""
      requestBody:
        content:
          '*/*':
            schema:
              $ref: "#/components/schemas/NotifyListModel"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "{\"status\": \"OK\"|"
  /1.0/files/upload/pdf:
    post:
      description: ""
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "string"
                format: "uuid"
  /1.0/public/{folder_name}/{file_name}:
    get:
      description: ""
      parameters:
        - name: "file_name"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "folder_name"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "OK <br> A file response"
          content:
            application/*:
              schema:
                type: "object"
                format: "binary"
        "404":
          description: "Not Found"
          content:
            '*/*':
              schema:
                type: "object"
  /1.0/teams/accept/{inviteId}:
    post:
      description: ""
      parameters:
        - name: "inviteId"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "object"
  /1.0/teams/apply/{teamId}:
    post:
      description: ""
      parameters:
        - name: "teamId"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "object"
  /1.0/teams/create:
    post:
      description: ""
      requestBody:
        content:
          '*/*':
            schema:
              $ref: "#/components/schemas/CreateTeamRequest"
        required: true
      responses:
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                Example#1:
                  description: ""
                  value:
                    status: "У вас недостаточно прав!"
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/CreateTeamRespond"
  /1.0/teams/invites:
    get:
      description: ""
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/InvitesRespondModel"
  /1.0/teams/load:
    get:
      description: ""
      parameters:
        - name: "limit"
          in: "query"
          required: false
          schema:
            type: "string"
        - name: "offset"
          in: "query"
          required: false
          schema:
            type: "string"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/SmallTeamRespondModel"
  /1.0/teams/load/{id}:
    get:
      description: ""
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/TeamRespondModel"
  /1.0/teams/loadml:
    get:
      description: ""
      parameters:
        - name: "limit"
          in: "query"
          required: false
          schema:
            type: "string"
        - name: "offset"
          in: "query"
          required: false
          schema:
            type: "string"
      requestBody:
        content:
          '*/*':
            schema:
              $ref: "#/components/schemas/TagsTeamRequest"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/SmallTeamRespondModel"
  /1.0/teams/loadmy:
    get:
      description: ""
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/SmallTeamRespondModel"
  /1.0/teams/tags/{teamId}:
    get:
      description: ""
      parameters:
        - name: "teamId"
          in: "path"
          required: true
          schema:
            type: "integer"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/TagsOutput"
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                Example#1:
                  description: ""
                  value:
                    status: "Не вписал userId"
  /1.0/teams/template:
    get:
      description: ""
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/TeamTemplate"
        "204":
          description: "No Content"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                Example#1:
                  description: ""
                  value:
                    status: "Темплейт отсутствует"
  /1.0/teams/vacancy/{teamId}:
    get:
      description: ""
      parameters:
        - name: "teamId"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/VacancyRespond"
  /1.0/teams/vacancy/generate:
    post:
      description: ""
      requestBody:
        content:
          '*/*':
            schema:
              $ref: "#/components/schemas/VacancyGenerateInputModel"
        required: true
      responses:
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                Example#1:
                  description: ""
                  value:
                    status: "Тэмплейт команды еще не создан"
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "object"
  /1.0/tours/list:
    get:
      description: ""
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/TourOutputResponse"
  /1.0/tours/results/name:
    get:
      description: ""
      parameters:
        - name: "tourId"
          in: "query"
          required: false
          schema:
            type: "string"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/TourResultOutputResponse"
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                Example#1:
                  description: ""
                  value:
                    status: "Не передан корректный tourId"
  /1.0/tours/results/user:
    get:
      description: ""
      parameters:
        - name: "userId"
          in: "query"
          required: false
          schema:
            type: "string"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/TourResultOutputResponse"
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                Example#1:
                  description: ""
                  value:
                    status: "Не передан корректный userId"
  /1.0/users/{userId}:
    patch:
      description: ""
      parameters:
        - name: "userId"
          in: "path"
          required: true
          schema:
            type: "string"
      requestBody:
        content:
          '*/*':
            schema:
              $ref: "#/components/schemas/EditUserModel"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "{\"success\": true}"
  /1.0/users/{userId}/password:
    patch:
      description: ""
      parameters:
        - name: "userId"
          in: "path"
          required: true
          schema:
            type: "string"
      requestBody:
        content:
          '*/*':
            schema:
              $ref: "#/components/schemas/EditUserPassword"
        required: true
      responses:
        "201":
          description: "Created"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/TokenRespondOutput"
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                Example#1:
                  description: ""
                  value:
                    status: "Старый пароль указан неверно"
  /1.0/users/invites/accept/{inviteId}:
    post:
      description: ""
      parameters:
        - name: "inviteId"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "object"
  /1.0/users/invites/apply/{userId}:
    post:
      description: ""
      parameters:
        - name: "userId"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "object"
  /1.0/users/invites/load:
    get:
      description: ""
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/UserInvitesRespondModel"
  /1.0/users/login:
    post:
      description: ""
      requestBody:
        content:
          '*/*':
            schema:
              $ref: "#/components/schemas/LoginInputModel"
        required: true
      responses:
        "401":
          description: "Unauthorized"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                Example#1:
                  description: ""
                  value:
                    status: "Пользователь с указанным логином и паролем не найден"
                Example#2:
                  description: ""
                  value:
                    status: "Пользователь с указанным логином и паролем не найден"
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/TokenRespondOutput"
  /1.0/users/my:
    get:
      description: ""
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ProfileOutputResponse"
  /1.0/users/register:
    post:
      description: ""
      requestBody:
        content:
          '*/*':
            schema:
              $ref: "#/components/schemas/RegisterInputModel"
        required: true
      responses:
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "409":
          description: "Conflict"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                Example#1:
                  description: ""
                  value:
                    status: "Пользователь с таким логином уже зарегистрирован!"
        "201":
          description: "Created"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/TokenRespondOutput"
  /1.0/users/tags:
    delete:
      description: ""
      requestBody:
        content:
          '*/*':
            schema:
              $ref: "#/components/schemas/RemoveUserInputModel"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "object"
    post:
      description: ""
      requestBody:
        content:
          '*/*':
            schema:
              $ref: "#/components/schemas/AddUserTagsInputModel"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "object"
  /1.0/users/tags/{userId}:
    get:
      description: ""
      parameters:
        - name: "userId"
          in: "path"
          required: true
          schema:
            type: "integer"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/TagsOutput"
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                Example#1:
                  description: ""
                  value:
                    status: "Не вписал userId"
  /1.0/users/withoutTeam:
    get:
      description: ""
      parameters:
        - name: "limit"
          in: "query"
          required: false
          schema:
            type: "string"
        - name: "offset"
          in: "query"
          required: false
          schema:
            type: "string"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/ProfileOutputResponse"
  /1.0/vacancy/{id}:
    delete:
      description: "post { <br> VacancyController(call).add() <br> }"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "integer"
      responses:
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                Example#1:
                  description: ""
                  value:
                    status: "id == null"
        "202":
          description: "Accepted"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                Example#1:
                  description: ""
                  value:
                    status: "Не существовало или ошибка, но пусть будет accepted"
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "object"
    get:
      description: ""
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "integer"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/VacancyRespond"
        "404":
          description: "Not Found"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                Example#1:
                  description: ""
                  value:
                    status: "id == null"
components:
  schemas:
    TourScoreAnalyticResponse:
      type: "object"
      properties:
        height:
          type: "number"
          format: "float"
        count:
          type: "integer"
          format: "int32"
    TourAnalyticResponse:
      type: "object"
      properties:
        name:
          type: "string"
        averageMedian:
          type: "number"
          format: "float"
        averageAlgebraic:
          type: "number"
          format: "float"
        users:
          type: "array"
          items:
            $ref: "#/components/schemas/TourScoreAnalyticResponse"
      required:
        - "name"
        - "users"
    UserTourAnalyticResponse:
      type: "object"
      properties:
        name:
          type: "string"
        score:
          type: "number"
          format: "float"
        maxScore:
          type: "integer"
          format: "int32"
      required:
        - "name"
    UserAnalyticResponse:
      type: "object"
      properties:
        tours:
          type: "array"
          items:
            $ref: "#/components/schemas/UserTourAnalyticResponse"
        averageMedian:
          type: "number"
          format: "float"
        averageAlgebraic:
          type: "number"
          format: "float"
      required:
        - "tours"
    ErrorResponse:
      type: "object"
      properties:
        status:
          type: "string"
      required:
        - "status"
    DocumentConditionCreateInput:
      type: "object"
      properties:
        fieldName:
          type: "string"
        condition:
          type: "string"
        value:
          type: "string"
      required:
        - "fieldName"
        - "condition"
        - "value"
    DocumentCreateInput:
      type: "object"
      properties:
        name:
          type: "string"
        description:
          type: "string"
        required:
          type: "boolean"
        template:
          type: "string"
        extensions:
          type: "array"
          items:
            type: "string"
        conditions:
          type: "array"
          items:
            $ref: "#/components/schemas/DocumentConditionCreateInput"
      required:
        - "name"
        - "description"
        - "template"
        - "extensions"
        - "conditions"
    DocumentConditionOutputResponse:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int32"
        fieldName:
          type: "string"
        condition:
          type: "string"
        value:
          type: "string"
      required:
        - "fieldName"
        - "condition"
        - "value"
    DocumentOutputResponse:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int32"
        name:
          type: "string"
        description:
          type: "string"
        required:
          type: "boolean"
        template:
          type: "string"
        extensions:
          type: "array"
          items:
            type: "string"
        conditions:
          type: "array"
          items:
            $ref: "#/components/schemas/DocumentConditionOutputResponse"
      required:
        - "name"
        - "description"
        - "template"
        - "extensions"
        - "conditions"
    DocumentConditionUpdateInput:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int32"
        fieldName:
          type: "string"
        condition:
          type: "string"
        value:
          type: "string"
      required:
        - "fieldName"
        - "condition"
        - "value"
    DocumentUpdateInput:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int32"
        name:
          type: "string"
        description:
          type: "string"
        required:
          type: "boolean"
        template:
          type: "string"
        extensions:
          type: "array"
          items:
            type: "string"
        conditions:
          type: "array"
          items:
            $ref: "#/components/schemas/DocumentConditionUpdateInput"
      required:
        - "name"
        - "description"
        - "template"
        - "extensions"
        - "conditions"
    GroupSetRequestModel:
      type: "object"
      properties:
        userId:
          type: "integer"
          format: "int32"
        group:
          type: "string"
          enum:
            - "ADMIN"
            - "ORGANIZER"
            - "JURY"
            - "PRODUCT"
            - "MENTOR"
            - "MEMBER"
            - "OLD_MEMBER"
            - "NOT_VERIFIED"
      required:
        - "group"
    DeleteTagsInputModel:
      type: "object"
      properties:
        tagIdList:
          type: "array"
          items:
            type: "integer"
            format: "int32"
      required:
        - "tagIdList"
    TagObjectOutput:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int32"
        tag:
          type: "string"
      required:
        - "tag"
    TagsOutput:
      type: "object"
      properties:
        list:
          type: "array"
          items:
            $ref: "#/components/schemas/TagObjectOutput"
      required:
        - "list"
    CreateTagsInputModel:
      type: "object"
      properties:
        tagList:
          type: "array"
          items:
            type: "string"
      required:
        - "tagList"
    Slot:
      type: "object"
      properties:
        possibleItems:
          type: "array"
          items:
            type: "string"
            enum:
              - "BACKEND"
              - "FRONTEND"
              - "MOBILE"
        required:
          type: "boolean"
      required:
        - "possibleItems"
    TeamTemplate:
      type: "object"
      properties:
        slots:
          type: "array"
          items:
            $ref: "#/components/schemas/Slot"
      required:
        - "slots"
    AdminUserOutputResponse:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int32"
        firstName:
          type: "string"
        lastName:
          type: "string"
        sex:
          type: "string"
        email:
          type: "string"
        birthdayDate:
          type: "integer"
          format: "int64"
        commandName:
          type: "string"
        docsReady:
          type: "boolean"
      required:
        - "firstName"
        - "lastName"
        - "sex"
        - "email"
        - "commandName"
    NotifyListModel:
      type: "object"
      properties:
        userIds:
          type: "array"
          items:
            type: "integer"
            format: "int32"
        message:
          type: "string"
      required:
        - "userIds"
        - "message"
    CreateTeamRequest:
      type: "object"
      properties:
        name:
          type: "string"
        description:
          type: "string"
      required:
        - "name"
        - "description"
    CreateTeamRespond:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int32"
    ProfileOutputResponse:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int32"
        username:
          type: "string"
        firstName:
          type: "string"
        lastName:
          type: "string"
        group:
          type: "string"
          enum:
            - "ADMIN"
            - "ORGANIZER"
            - "JURY"
            - "PRODUCT"
            - "MENTOR"
            - "MEMBER"
            - "OLD_MEMBER"
            - "NOT_VERIFIED"
        tgLogin:
          type: "string"
        registerAt:
          type: "integer"
          format: "int64"
        description:
          type: "string"
        major:
          type: "string"
          enum:
            - "BACKEND"
            - "FRONTEND"
            - "MOBILE"
        team:
          type: "integer"
          format: "int32"
      required:
        - "username"
        - "firstName"
        - "lastName"
        - "group"
        - "tgLogin"
        - "description"
    InvitesRespondModel:
      type: "object"
      properties:
        user:
          $ref: "#/components/schemas/ProfileOutputResponse"
        id:
          type: "integer"
          format: "int32"
      required:
        - "user"
    SmallTeamRespondModel:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int32"
        name:
          type: "string"
        description:
          type: "string"
        iconUrl:
          type: "string"
        bannerUrl:
          type: "string"
        membersCount:
          type: "integer"
          format: "int32"
      required:
        - "name"
        - "description"
        - "iconUrl"
        - "bannerUrl"
    TeamRespondModel:
      type: "object"
      properties:
        team:
          $ref: "#/components/schemas/SmallTeamRespondModel"
        users:
          type: "array"
          items:
            $ref: "#/components/schemas/ProfileOutputResponse"
      required:
        - "team"
        - "users"
    TagsTeamRequest:
      type: "object"
      properties:
        tags:
          type: "array"
          items:
            type: "integer"
            format: "int32"
      required:
        - "tags"
    VacancyRespond:
      type: "object"
      properties:
        teamId:
          type: "integer"
          format: "int32"
        tags:
          type: "array"
          items:
            type: "string"
      required:
        - "tags"
    VacancyTagsByMajor:
      type: "object"
      properties:
        major:
          type: "string"
          enum:
            - "BACKEND"
            - "FRONTEND"
            - "MOBILE"
        tagIds:
          type: "array"
          items:
            type: "integer"
            format: "int32"
      required:
        - "major"
        - "tagIds"
    VacancyGenerateInputModel:
      type: "object"
      properties:
        vacancyTemplates:
          type: "array"
          items:
            $ref: "#/components/schemas/VacancyTagsByMajor"
      required:
        - "vacancyTemplates"
    TourOutputResponse:
      type: "object"
      properties:
        name:
          type: "string"
        year:
          type: "integer"
          format: "int32"
        maxScore:
          type: "integer"
          format: "int32"
      required:
        - "name"
    TourResultOutputResponse:
      type: "object"
      properties:
        tour:
          $ref: "#/components/schemas/TourOutputResponse"
        result:
          type: "number"
          format: "float"
        userId:
          type: "integer"
          format: "int32"
      required:
        - "tour"
    EditUserModel:
      type: "object"
      properties:
        description:
          type: "string"
        tgLogin:
          type: "string"
      required:
        - "description"
        - "tgLogin"
    EditUserPassword:
      type: "object"
      properties:
        oldPassword:
          type: "string"
        newPassword:
          type: "string"
      required:
        - "oldPassword"
        - "newPassword"
    TokenRespondOutput:
      type: "object"
      properties:
        token:
          type: "string"
      required:
        - "token"
    UserInvitesRespondModel:
      type: "object"
      properties:
        team:
          $ref: "#/components/schemas/SmallTeamRespondModel"
        id:
          type: "integer"
          format: "int32"
      required:
        - "team"
    LoginInputModel:
      type: "object"
      properties:
        username:
          type: "string"
        password:
          type: "string"
      required:
        - "username"
        - "password"
    RegisterInputModel:
      type: "object"
      properties:
        username:
          type: "string"
        password:
          type: "string"
        tgLogin:
          type: "string"
        firstName:
          type: "string"
        lastName:
          type: "string"
        birthdayDate:
          type: "integer"
          format: "int64"
        major:
          type: "string"
          enum:
            - "BACKEND"
            - "FRONTEND"
            - "MOBILE"
      required:
        - "username"
        - "password"
        - "tgLogin"
        - "firstName"
        - "lastName"
        - "major"
    RemoveUserInputModel:
      type: "object"
      properties:
        userId:
          type: "integer"
          format: "int32"
        tagId:
          type: "integer"
          format: "int32"
    AddUserTagsInputModel:
      type: "object"
      properties:
        userId:
          type: "integer"
          format: "int32"
        tagIdList:
          type: "array"
          items:
            type: "integer"
            format: "int32"
      required:
        - "tagIdList"